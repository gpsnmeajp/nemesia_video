# はじめに

はじめまして、本日の解説役のネメシアと申します。
今回からこのチャンネルでは、時折解説動画を上げていこうと思っております。

初回の今回は、nostrについて解説していきます。

nostrは、2019に発表された、分散型ソーシャルネットワークを実現するための通信プロトコルです。

Notes and Other Stuff Transmitted by Relaysを略して、nostrと呼びます。

リアルタイムな投稿、リポスト、引用、絵文字リアクションなどをサポートしており、
まさにTwitter風ソーシャルネットワークを実現するための機能を持っています。

一方で、公開鍵暗号技術を用いた非常に独特な性質を持ったプロトコルになっています。
その理念や、実装、様々な性質について、詳しく解説して参ります。


# 1. 理念

nostrは、「勝手な投稿の修正や削除を難しくし、また凍結やBANを無意味にする」という理念を、掲げています。
主に、有名ソーシャルネットワークで発生する、不本意な凍結やBANに対して考えられたものと思ってください。

これを、通常、censorship-resistant(検閲耐性)と呼びます。
今後説明するすべての概念や仕組みに絡んでくる重要な要素ですので、覚えておいてください。

一方で、注意してほしいのですが、nostr単体での匿名性は低いです。
普通に接続する限り、投稿(あるいは投稿を複製した人)のIPアドレスと公開鍵がひも付きます。


# 2. 実装

nostrの実装について語る前に、従来のソーシャルネットワークの実装を見てみましょう。

## 中央集権型

まず、中央集権型。
いわゆるTwitterなどの、従来型のWebサービスです。

サービスが用意した唯一のサーバー群に所属・接続し、そこのサービスを利用します。

サービス運営者が責任を持って、インフラ整備や環境整備を行いますので、
サービスの運営が正常なうちは、非常に快適に使用することができます。
治安維持も行われ、人物の唯一性も担保されますし、公式アプリなどが精力的に提供されます。

一方で、サービスの運営が破綻すると、広告が大量に差し込まれたり、
投稿の表示にさまざまな"アルゴリズム"が導入されたり、意図しない凍結やBAN、投稿の削除、
アカウントの没収、APIの有料化や凍結なども発生します。

またサービスが不安定になったりした場合でも、引っ越しなどを行うことは原則できません。
ソーシャルグラフは閉じ込められており、データも動かすことができないためです。

---

これに対抗して生まれたのが、連合分散型です。
ActivityPubプロトコルを採用しているmastodonや、日本ではMisskeyなどが有名です。

これは、個人や企業が立てたサーバー1つ1つを、小さなソーシャルネットワークとして機能させ、
そのサーバー同士を、共通のプロトコルで接続することで、巨大なソーシャルネットワークとして機能するようにしたものです。

各ユーザーは、サーバーに所属し、そこから閲覧・投稿することとなります。
@nemesia@achetaria.com のように、アカウント名の後ろに所属サーバーがついています。

従来どおり、ブラウザやアプリから簡単に使用することができます。

所属サーバー自体が小さなソーシャルネットワークとして機能するようになっていることが多いため、
サーバーごとに様々な文化があり、規約や管理者もバラバラです。個人が運営していることも多いです。

そのため、気の合う管理者や、精力的な管理者であれば、快適に使えますが、
そうでない場合は、居心地が悪かったり、使い方の想定が合わず凍結や削除される場合もあります。
サーバーそのものが放棄される可能性すらあります。

いずれにせよ、大企業ほどのサポートや利用体験の良さは期待できないでしょう。

さらに、管理責任の都合上、サーバー管理者同士の理念思想の違いや、仲の悪さによって、
サーバー同士が接続しない(ドメインブロック)を実施している場合があります。

その場合でも、大きくは同じネットワークに居ますので、別のサーバーに引っ越すという
選択が取れるのが連合分散型の利点です。
ただし、サーバー独自機能を利用していた場合は、引っ越すと使えなくなる事が多いです。

こういったバラバラ具合は、利点とも欠点とも言えます






これは、中央管理サーバーや、たとえ分散型システムであっても所属サーバーがあると
達成するのが難しいものです。

nostrでは、これを「連携しないリレー」の集合体と通信することで解決します。

具体的に図で表すとこのようになります。

利用者は、クライアントです。任意の人が立てたサーバーを、リレーと呼びます。



